#include <stdio.h>
#include <stdbool.h>
#define MAX_PROCESSES 50

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int waiting_time;
    int turnaround_time;
};
int main() {
    struct Process processes[MAX_PROCESSES];
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    // Input the details of each process
    for (int i = 0; i < n; i++) {
        printf("Enter the details of process %d\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].id = i + 1;
    }

    // Sort the processes in order of their burst time
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[j].burst_time < processes[i].burst_time) {
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    // Calculate the waiting time and turnaround time for each process
    int current_time = 0;
    for (int i = 0; i < n; i++) {
        struct Process current_process = processes[i];
        if (current_time < current_process.arrival_time) {
            current_time = current_process.arrival_time;
        }
        current_process.waiting_time = current_time - current_process.arrival_time;
        current_time += current_process.burst_time;
        current_process.turnaround_time = current_time - current_process.arrival_time;
    }

    // Display the details of each process
    printf("\nProcess\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        struct Process current_process = processes[i];
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", current_process.id, current_process.arrival_time,
               current_process.burst_time, current_process.waiting_time, current_process.turnaround_time);
    }

    return 0;
}
